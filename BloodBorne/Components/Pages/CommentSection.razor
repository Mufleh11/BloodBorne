@page "/Comment/{id:int}"
@using BloodBorne.Context
@using BloodBorne.Model;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore
@inject DatabaseContext DbContext
@inject CommentProvider CommentProvider
@inject TagProvider TagProvider
@inject UserProvider UserProvider


@if (Comments != null && Comments.Any())
{
    <ul>
        @foreach (var comment in Comments)
        {
            <li>
               @*  <strong>@(await GetUserEmailAsync(comment.User?.Id))</strong> (@comment.DateTime.ToShortDateString()): *@
                <p>@comment.CommentDetails</p>
                <p><strong>Tags:</strong> @string.Join(", ", comment.Tags?.Select(t => t.TagName) ?? Enumerable.Empty<string>())</p>
            </li>
        }
    </ul>
}
else
{
    <p>No comments available.</p>
}

<h4>Add a Comment</h4>
<EditForm Model="@NewComment" OnValidSubmit="SubmitCommentAsync">
    <InputTextArea id="commentDetails" @bind-Value="NewComment.CommentDetails" placeholder="Enter your comment here" />
    <br />

    <label for="tags">Select Tag:</label>
    <InputSelect id="tags" @bind-Value="SelectedTagId">
        @foreach (var tag in Tags)
        {
            <option value="@tag.Id">@tag.TagName</option>
        }
    </InputSelect>
    <br />

    <button type="submit">Submit</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    private List<Comment> Comments;
    private List<Tags> Tags;
    private Comment NewComment = new();
    private int SelectedTagId;

    protected override async Task OnInitializedAsync()
    {
        Comments = await CommentProvider.GetCommentsAsync();
        Tags = await TagProvider.GetAllTagsAsync();
    }

    private async Task<string> GetUserEmailAsync(string userId)
    {
        if (string.IsNullOrEmpty(userId))
            return "Unknown User";

        var user = await UserProvider.GetUserByIdAsync(userId);
        return user?.Email ?? "Unknown User"; // Use Email directly
    }

    private async Task SubmitCommentAsync()
    {
        if (SelectedTagId > 0)
        {
            var selectedTag = Tags.FirstOrDefault(t => t.Id == SelectedTagId);
         if (selectedTag != null)
         {
                NewComment.Tags = new List<Tags> { selectedTag };
         }
    }

        // Retrieve the currently logged-in user
        var currentUser = await UserProvider.GetUserByIdAsync("CURRENT_USER_ID"); // Replace with actual logic
        if (currentUser != null)
        {
            NewComment.User = currentUser;
            NewComment.DateTime = DateTime.Now;

            

            // Refresh comments
           

            // Reset form
            NewComment = new Comment();
            SelectedTagId = 0;
        }
    }
}


@*
<div>
    <label for="comment">Comment:</label>
    <textarea id="comment" @bind="NewComment.CommentDetails" class="form-control"></textarea>

    <label for="tags">Select Tags:</label>
    <select id="tags" class="form-control" @onchange="TagSelectionChanged" multiple>
        @foreach (var tag in AllTags)
        {
            <option value="@tag.Id">@tag.TagName</option>
        }
    </select>

    <button @onclick="SubmitComment" class="btn btn-primary mt-2">Submit</button>
</div>

<h4>All Comments</h4>
@if (Comments == null || Comments.Count == 0)
{
    <p>No comments yet.</p>
}
else
{
    <ul>
        @foreach (var comment in Comments)
        {
            <li>
                <strong>@comment.User.UserName</strong> (@comment.DateTime.ToShortDateString()):
                <p>@comment.CommentDetails</p>
                <p><strong>Tags:</strong> @string.Join(", ", comment.Tags?.Select(t => t.TagName) ?? Enumerable.Empty<string>())</p>
            </li>
        }
    </ul>
}

@code {
    private List<Comment> Comments;
    private Comment NewComment = new Comment();
    private List<Tags> AllTags = new List<Tags>();
    private List<int> SelectedTagIds = new List<int>();
    public List<Tags> Tags { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Comments = await CommentProvider.GetCommentsAsync();
        AllTags = await TagProvider.GetAllTagsAsync();
    }

    private void TagSelectionChanged(ChangeEventArgs e)
    {
        var selectedValues = e.Value as IEnumerable<string>;

        if (selectedValues != null)
        {
            SelectedTagIds = selectedValues.Select(int.Parse).ToList();
        }
    }
    private readonly UserManager<User> _userManager;

    public CommentSection(UserManager<User> userManager)
    {
        _userManager = userManager;
    }
    private async Task SubmitComment()
    {
        if (!string.IsNullOrWhiteSpace(NewComment.CommentDetails))
        {
            var user = await UserManager.GetUserAsync(Context.User); // Get the logged-in user
            var userId = user?.Id;

            if (userId == null)
            {
                // Handle unauthenticated user case
                return;
            }

            // Add selected tags to the comment
            NewComment.Tags = AllTags.Where(tag => SelectedTagIds.Contains(tag.Id)).ToList();

            // Submit comment
            await CommentProvider.AddCommentAsync(NewComment, userId, new List<string>());

            // Reset the form
            NewComment = new Comment();
            SelectedTagIds.Clear();

            // Refresh comments
            Comments = await CommentProvider.GetCommentsAsync();
        }
    }
} 
@*
<div>
    <label for="comment">Comment:</label>
    <textarea id="comment" @bind="NewComment.CommentDetails" class="form-control"></textarea>

    <label for="tags">Tags:</label>
    

    <button @onclick="SubmitComment" class="btn btn-primary mt-2">Submit</button>
</div>

<h4>All Comments</h4>
@if (Comments == null || Comments.Count == 0)
{
    <p>No comments yet.</p>
}
else
{
    <ul>
        @foreach (var comment in Comments)
        {
            <li>
                <strong>@comment.User.UserName</strong> (@comment.DateTime.ToShortDateString()):
                <p>@comment.CommentDetails</p>
                <p><strong>Tags:</strong> @string.Join(", ", comment.Tags.Select(t => t.tag))</p>
            </li>
        }
    </ul>
}

@code {
    private List<Comment> Comments;
    private Comment NewComment = new Comment();


    protected override async Task OnInitializedAsync()
    {
        Comments = await CommentProvider.GetCommentsAsync();
    }

    private async Task SubmitComment()
    {
        if (!string.IsNullOrWhiteSpace(NewComment.CommentDetails))
        {
            var user = await UserManager.GetUserAsync(Context.User); // Get the logged-in user
            var userId = user?.Id;

            if (userId == null)
            {
                // Handle unauthenticated user case
                return;
            }

            // Parse Tags
            var tags = string.IsNullOrWhiteSpace(TagInput)
                ? new List<string>()
                : TagInput.Split(',').Select(tag => tag.Trim()).ToList();

            // Submit comment
            await CommentProvider.AddCommentAsync(NewComment, userId, tags);

            // Reset the form
            NewComment = new Comment();


            // Refresh comments
            Comments = await CommentProvider.GetCommentsAsync();
        }
    }
}
*@

@*
<h1>Comments</h1>

<form method="post">
    <div>
        <label asp-for="NewComment.UserName"></label>
        <input asp-for="NewComment.UserName" class="form-control" />
    </div>
    <div>
        <label asp-for="NewComment.Content"></label>
        <textarea asp-for="NewComment.Content" class="form-control"></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

<h2>All Comments</h2>
@if (Model.Comment.Any())
{
    <ul>
        @foreach (var comment in Model.Comment)
        {
            <li>
                <strong>@comment.UserName</strong> (@comment.CreatedAt):
                <p>@comment.Content</p>
            </li>
        }
    </ul>
}
else
{
    <p>No comments yet.</p>
}

@* <div class="row g-0">
    <div class="col-md-12">
        <button class="btn btn-primary float-end" @onclick="ShowAddComment">
            Add Comment
        </button>
    </div>
</div>

@if (showForm)
{
 <div class="card">
       <div class="card-body bg-light">
            <h4 class="card-title">
                @*  @(model.Id == 0 ? "Add Comment : Edit Comment" ) *@
  @*           </h4>
            <EditForm OnValidSubmit="Submit" EditContext="editContext">
                <DataAnnotationsValidator />
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="commentdetail" class="form-label">Enter your Comment</label>
                        <InputText class="form-control" placeholder="Comment" @bind-Value="model.CommentDetails" />
                        <ValidationMessage For="@(() => model.CommentDetails)" />
                    </div>
                </div>

                <div class="col-md-12">
                    <button type="button" style="margin-right: 10px;" class="btn btn-primary btn-md w-50 ">
                        @(model.Id == 0 ? "Add Comment" : "Edit Comment")
                    </button> 
                </div>
            </EditForm>
            </div>
      </div>
}
  *@

@* <div>
    @foreach (var Comment in comment)
    {
        <h4>
           
            @Comment.CommentDetails
            
        </h4>
    }

</div>
 *@


@*
@code {
    [Parameter]
    public int Id { get; set; }
    private Bosses bosses;
    private List<Comment>? comment;
    private EditContext editContext;
    private Comment model;
    private bool showForm;
    public Comment Comment;
    private string CommentDetails;
    private Tags tags;
    private DateTime dateTime;


    private User user;

    // public Comment Model
    // {
    //     get
    //     {
    //         return model;
    //     }
    //     set
    //     {
    //         model = value ?? new Comment();

    //         CommentDetails = model.CommentDetails;
    //         editContext = new(model);
    //     }
    // }


    public EventCallback<bool> OnSaved { get; set; }

    private void ShowAddComment()
    {
        model = new Comment();
        editContext = new EditContext(model);
        showForm = true;
    }

    private async Task CreateComment()
    {
        

        await CommentProvider.CreateComment(user, CommentDetails,tags,bosses,dateTime);


    }



    private async Task Submit()
    {
       

        if (model.Id == 0)
            DbContext.Comment.Add(model);
        else
            DbContext.Comment.Update(model);
        await DbContext.SaveChangesAsync();
        await OnSaved.InvokeAsync();
        await Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        model = new Comment();
        editContext = new EditContext(model);
        comment = await DbContext.Comment.ToListAsync();
    }
}
*@