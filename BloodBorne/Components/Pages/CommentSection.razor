@page "/Comment/{id:int}"
@using BloodBorne.Context
@using BloodBorne.Model;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims;
@inject DatabaseContext DbContext
@inject CommentProvider CommentProvider
@inject TagProvider TagProvider
@inject UserProvider UserProvider
@inject BossesProvider BossesProvider
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider




<main class="container-fluid">
    <h1>@bossName Chat!</h1> <!-- Display Boss Name with "chat" -->

   @*  Display for the search box  *@
    <div class="dark-form">
        <label for="tagSearch" class="dark-form">Search</label>
        <input type="text" id="tagSearch" class="form-control" @bind="searchTerm" placeholder="Enter a tag or comment keyword..." />
    </div>


    <div class="com">
        @if (isAuthenticated)
        {
            <div class="row g-0">
                <div class="col-md-12">
                    <button class="btn btn-dark float-end" @onclick="ShowAddComment">
                        Click To Enter A Comment
                    </button>
                </div>
            </div>
        }

        @if (showForm) // Check if the comment form should be displayed
        {
            <div class="card-body">
                <!-- A form to add a new comment -->
                <EditForm Model="@Model" OnValidSubmit="SubmitComment">
                    <!-- Input for the comment text -->
                    <div class="dark-form">
                        <label for="CommentDetails" class="form-label">Please enter here:</label>
                        <InputText id="CommentDetails" class="styled-textbox"
                                   @bind-Value="@Model.CommentDetails" />
                        <!-- Validation message for the CommentDetails field -->
                        <ValidationMessage For="@(() => Model.CommentDetails)" />
                    </div>
                    <!-- Dropdown for selecting a tag -->
                    <div class="dark-form">
                        <label for="tags" class="form-label">Select Tag:</label>
                        <InputSelect id="tags" class=" styled-select" @bind-Value="Model.TagId">
                            @foreach (var tag in Tags) // Iterate through available tags
                            {
                                <option value="@tag.Id">@tag.TagName</option>
                            }
                        </InputSelect>
                        <!-- Validation message for the TagId field -->
                        <ValidationMessage For="@(() => Model.TagId)" />
                    </div>
                    <!-- Submit button for the form -->
                    <div>
                        <button type="submit" class=" styled-submit">Submit Comment</button>
                    </div>
                </EditForm>
            </div>
        }
    </div>

    @if (Comments != null) // Check if there are any comments to display
    {
        {
            <!-- List to display all comments -->
            <ul class="comment-list">
                @foreach (var comment in FilteredComments) // Iterate through the filtered comments
                {
                    <li>
                        <!-- Each comment is displayed in a card -->
                        <div class="card">
                            <!-- Header of the card, showing the username -->
                            <div class="card-header">
                                <h4>
                                    <span class="badge bg-secondary">
                                        @comment.User.UserName
                                    </span>
                               </h4>
                            </div>
                            <!-- Body of the card, showing tag and comment details -->
                            <div class="card-body">
                                <h4>
                                    <span class="badge bg-info">
                                        @comment.Tags.TagName
                                    </span>
                                </h4>
                                <p>@comment.CommentDetails</p>
                            </div>
                            <!-- Footer of the card, showing likes and dislikes -->
                            <div class="card-footer">
                                <span>
                                    <button class="btn btn-success" @onclick="() => LikeComment(comment.Id)">👍 Like</button> @comment.Likes
                                </span>
                                <span>
                                    <button class="btn btn-danger" @onclick="() => DislikeComment(comment.Id)">👎 Dislike</button> @comment.Dislikes
                                </span>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        }
    }
    else
    {
        <!-- Message displayed if there are no comments -->
        <h4>No Comments Currently</h4>
    }
 
</main>
@* 
 class="validation-message" *@
@code {
    // Parameter to receive an identifier for the boss
    [Parameter]
    public int Id { get; set; }

    // Parameter to receive a single comment, if applicable
    [Parameter]
    public Comment? Comment { get; set; }

    [Parameter]
    public User? User { get; set; }

    // Collection of all comments for the current entity to allow me to iterate through it
    private IEnumerable<Comment> Comments;

    // List of available tags for categorizing comments
    public List<Tags> Tags { get; set; }

    // Model for binding user input when adding a new comment
    private CommentModel Model { get; set; } = new CommentModel();

    // Flag to determine if the user is authenticated
    private bool isAuthenticated;

    // Flag to control the visibility of the comment input form
    private bool showForm;

    private string searchTerm = "";   // Search term entered by the user for filtering comments

    public string bossName;  // Store the boss name


    // Private field to hold the list of filtered comments
    private IEnumerable<Comment> filteredComments;

    // Public property to access and filter comments
    private IEnumerable<Comment> FilteredComments
    {
        //  Filters the comments based on the search term entered by the user
        get
        {
            return filteredComments.Where(GetSearchCriteria);
        }
        // Sets the filtered comments when a new collection is assigned
        set
        {
            filteredComments = value;
        }
    }

    // Method to determine if a comment matches the search term
    private bool GetSearchCriteria(Comment comments)
    {
        // If the search term is empty or whitespace, return true for all comments (no filtering)
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        // Check if the search term exists in the comment details or tag name (case insensitive)
        // This ensures that the comment details are checked for the entered search term
        // This allows searching by both comment details and the associated tag name
        if (comments.CommentDetails.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        if (comments.Tags?.TagName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }

        // If no matches are found, return false (comment doesn't match the search criteria)
        return false;
    }


    // Method to handle the Like button click
    private async Task LikeComment(int commentId)
    {
        // Find the comment by ID
        var comment = Comments.FirstOrDefault(c => c.Id == commentId);
        if (comment != null)
        {
            // Increment the Likes count
            comment.Likes++;

            // Save the updated comment to the database
            await CommentProvider.UpdateCommentAsync(comment);


            StateHasChanged(); // Force the component to re-render
        }
    }

    // Method to handle the Dislike button click
    private async Task DislikeComment(int commentId)
    {
        // Find the comment by ID
        var comment = Comments.FirstOrDefault(c => c.Id == commentId);
        if (comment != null)
        {
            // Increment the Dislikes count
            comment.Dislikes++;

            // Save the updated comment to the database
            await CommentProvider.UpdateCommentAsync(comment);

     

            StateHasChanged(); // Force the component to re-render
        }
    }



    // method that runs when the component is initialized (page loads)
    protected override async Task OnInitializedAsync()
    {
        // Load all available tags (categories for comments)
        Tags = await TagProvider.GetAllTagsAsync();

        // Load all comments associated with the current entity
        Comments = await CommentProvider.GetCommentsAsync();

        // Fetch the boss details (name)
        var boss = await BossesProvider.GetBossByIdAsync(Id);
        if (boss != null)
        {
            bossName = boss.Name;  // Set the boss name for display
        }

        // Filter comments by the BossId (only show comments for this specific Boss)
        filteredComments = Comments.Where(c => c.Bosses.Id == Id);

        // Get the authentication state (user information) from the authentication provider
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
       @*    var username = authState!.User!.Identity!.Name!;
        user = UserProvider.GetUserByUsernameAsync(username)!; *@

        // Check if the user is logged in (authenticated)
        isAuthenticated = user?.Identity?.IsAuthenticated ?? false;


        Model.BossId = Id; // Set the BossId from the route parameter

    }


    

    // Method to handle the form submission when adding a new comment
    private async Task SubmitComment()
    {
        // Retrieve the tag based on the selected TagId
        var Tag = await TagProvider.GetTagByIdAsync(Model.TagId); // Use an asynchronous method to get the Tag object

        // Retrieve the BossId (already passed through the route or model)
        var BossId = new Bosses { Id = Model.BossId }; // Or fetch the full Boss object if needed

        @*      var user = await UserProvider.GetUserByIdAsync(Model.UserId); *@

        // Get the current user's ID
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;

        // Retrieve the user ID from the claims
        var userId = claimsPrincipal.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        // Create a User object using the userId
        var user = new User { Id = userId };
        //pass the id value taken into the models value to then transfer that aswell
        

        // Create a new Comment object with the form data
        var comment = new Comment
            {
                CommentDetails = Model.CommentDetails,
                Tags = Tag,
                Bosses = new Bosses { Id = Model.BossId }, // Use the BossId from the route
                User = user, 
                Report = new List<Report>() // Assuming reports are empty initially
            };

        // Save the new comment to the database or data source
        await CommentProvider.AddCommentAsync(comment);



        // Reset the form model after submitting the comment
        Model = new CommentModel();
    }

    // Nested class that represents the model for the comment input form
    private sealed class CommentModel
    {
        // Represents the text of the comment (required input)
        [Required(ErrorMessage = "Please enter the comment details.")]
        public string CommentDetails { get; set; } = "";

        // Represents the selected tag ID (required input)
        [Required(ErrorMessage = "Please select a tag.")]
        public int TagId { get; set; }

        // Represents the associated boss ID for the comment (required input)
        [Required]
        public int BossId { get; set; }

        // Represents the username of the commenter (required input)
        [Required]
        public string UserId { get; set; }

        // Default constructor for creating a new, empty CommentModel
        public CommentModel()
        {

        }

        // Constructor for populating the CommentModel from existing comment data
        public CommentModel(Comment comment, Tags tags, Bosses bosses, User user)
        {
            CommentDetails = comment.CommentDetails;
            TagId = tags.Id;
            BossId = bosses.Id;
            UserId = user.Id;
        }
    }
    private void ShowAddComment()
    {

        showForm = true;
    }

}





