@page "/Comment/{id:int}"
@using BloodBorne.Context
@using BloodBorne.Model
@using Microsoft.EntityFrameworkCore
@inject DatabaseContext DbContext
@inject CommentProvider CommentProvider

<div class="row g-0">
    <div class="col-md-12">
        <button class="btn btn-primary float-end" @onclick="ShowAddComment">
            Add Comment
        </button>
    </div>
</div>

@if (showForm)
{
 <div class="card">
       <div class="card-body bg-light">
            <h4 class="card-title">
                @*  @(model.Id == 0 ? "Add Comment : Edit Comment" ) *@
            </h4>
            <EditForm OnValidSubmit="CreateComment" EditContext="editContext">
                <DataAnnotationsValidator />
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="commentdetail" class="form-label">Enter your Comment</label>
                        <InputText class="form-control" placeholder="Comment" @bind-Value="model.CommentDetails" />
                        <ValidationMessage For="@(() => model.CommentDetails)" />
                    </div>
                </div>

                <div class="col-md-12">
                    <button type="button" style="margin-right: 10px;" class="btn btn-primary btn-md w-50 ">
                        @(model.Id == 0 ? "Add Comment" : "Edit Comment")
                    </button> 
                </div>
            </EditForm>
            </div>
      </div>
}


<div>
    @foreach (var Comment in comment)
    {
        <h4>
           
            @Comment.CommentDetails
            
        </h4>
    }

</div>




@code {
    [Parameter]
    public int Id { get; set; }
    private List<Bosses> bosses;
    private List<Comment>? comment;
    private EditContext editContext;
    private Comment model;
    private bool showForm;
    public Comment Comment;
    private string CommentDetails;

    private User user;

    public Comment Model
    {
        get
        {
            return model;
        }
        set
        {
            model = value ?? new Comment();

            CommentDetails = model.CommentDetails;
            editContext = new(model);
        }
    }


    public EventCallback<bool> OnSaved { get; set; }

    private void ShowAddComment()
    {
        model = new Comment();
        editContext = new EditContext(model);
        showForm = true;
    }

    private async Task CreateComment()
    {
        

        await CommentProvider.CreateComment(user, CommentDetails);


    }



    private async Task Submit()
    {
       

        if (model.Id == 0)
            DbContext.Comment.Add(model);
        else
            DbContext.Comment.Update(model);
        await DbContext.SaveChangesAsync();
        await OnSaved.InvokeAsync();
        await Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        model = new Comment();
        editContext = new EditContext(model);
        comment = await DbContext.Comment.ToListAsync();
    }
}
